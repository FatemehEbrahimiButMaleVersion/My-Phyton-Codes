from random import choice, sample

class Character():
    def __init__(self, name: str, health: int, damage: int):
        self.name = name
        self.health = health
        self.damage = damage
        self.max_health = health
        self.weakened = False

    def __str__(self):
        return f"name: {self.name}\nhealth= {self.health}\ndamage= {self.damage}"

    def attack(self, other):
        if other.health > 0:
            other.take_damage(self)
        else:
            print(f"{other.name} is already dead!")

    def take_damage(self, attacker):
        self.health -= attacker.damage
        if self.health < 0:
            self.health = 0

class Warrior(Character):
    def init(self, name: str, health: int, damage: int, coefficient: int):
        super().init(name, health, damage)
        self.coefficient = coefficient

    def special_action(self, other):
        self.damage *= self.coefficient
        self.attack(other)
        print(f"{self.name} hurt {other.name} a lot,{other.name} health remaining= {other.health}")
        self.damage /= self.coefficient

class Healer(Character):
    def init(self, name: str, health: int, damage: int, heal: int):
        super().init(name, health, damage)
        self.heal = heal

    def special_action(self, other):
        other.health += self.heal
        print(f"{self.name} healed {other.name}. {other.name} health remaining= {other.health}")
        if other.health > other.max_health:
            other.health = other.max_health
            print(f"{other.name} has max HP now")

class Mage(Character):
    def init(self, name: str, health: int, damage: int, magic: int):
        super().init(name, health, damage)
        self.magic = magic

    def special_action(self, other):
        original_damage = other.damage
        other.weakened = True
        other.damage -= self.magic
        print(f"our big Mage {self.name} weakened {other.name}. {other.name}'s damage now= {other.damage}")

michael = Warrior("Michael", 150, 20, 3)
lisa = Warrior("Lisa", 100, 18, 2)
john = Warrior("John", 120, 15, 2)
layla = Healer("Layla", 50, 5, 30)
george = Mage("George", 110, 12, 2)
characters = [michael, lisa, john, layla, george]

def user_characters(characters):
    for i, character in enumerate(characters):
        print(f"character {i+1} : {character.name}")
    character1 = int(input("please enter your first character's number: "))
    character2 = int(input("please enter your second character's number: "))
    if character1 == character2:
        character2= int(input("you can't choose same character! try again: "))
    return [characters[character1-1], characters[character2-1]]

def bot_characters(characters):
    return sample(characters, 2)

choice_list = ["attack", "special_action"]

def bot_choice_op(bot_char, choice_list):
    return choice(choice_list)

print("welcome! please enter your favorite characters:") 
user_chars = user_characters(characters)
bot_chars = bot_characters(characters)

while True:
    try:
        player_char1 = user_chars[0]
    except:
        print(f"unfortunately, {player_char1} is dead, you have only {player_char2}")
        player_char1= user_chars[1]
    try:
        player_char2= user_chars[1]
    except:
        print(f"unfortunately, {player_char2} is dead, you have only {player_char1}")
        player_char2= user_chars[0]
    # Automatically switch to the alive character if one is dead
    if player_char1.health <= 0 and player_char2.health > 0:
        print(f"{player_char1.name} is dead, switching to {player_char2.name}")
        player_char1 = player_char2
    elif player_char2.health <= 0 and player_char1.health > 0:
        print(f"{player_char2.name} is dead, switching to {player_char1.name}")
        player_char2 = player_char1

    bot_char1 = bot_chars[0]
    if len(bot_chars)==1:
        bot_char2 = bot_chars[0]
    else:
        bot_char2= bot_chars[1]
    
    num = int(input(f"please choose your character number:(1-{player_char1.name},2-{player_char2.name})"))
    if num == 1:
        present_char = player_char1
    elif num == 2:
        present_char = player_char2
    else:
        print("invalid input!")
        continue

    print(f"your characters= {player_char1.name}, {player_char2.name}\nenemy characters= {bot_char1.name}, {bot_char2.name}")

    bot_char = choice(bot_chars)

    if present_char.health > 0:
        op = int(input("choose Operation!\n 1-attack \t 2-run \t 3-special_action: "))
        if op == 1:
            present_char.attack(bot_char)
            print(f"wow,you hurt the enemy! {bot_char.name}'s remaining health = {bot_char.health}")
        elif op == 2:
            print("oh, you ran away! bad ending")
            break
        elif op == 3:
            present_char.special_action(bot_char)
        else:
            print("invalid input, try again!")
            continue

    if bot_char.health <= 0:
        print(f"{bot_char.name} is dead!")
        bot_chars.remove(bot_char)
    
    bot_op = bot_choice_op(bot_char, choice_list)
    if bot_op == "attack":
        bot_char.attack(present_char)
        print(f"oh, your character is injured! {present_char.name}'s health = {present_char.health}")
    elif bot_op == "special_action":
        bot_char.special_action(present_char)

    if present_char.health <= 0:
        print(f"{present_char.name} is dead!")
        user_chars.remove(present_char)

    if len(user_chars) == 0:
        print("Game over, you lost!")
        break
    elif len(bot_chars) == 0:
        print("Congratulations! You won!")
        break